{"remainingRequest":"/Users/hypark/project/cdp-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hypark/project/cdp-admin/src/views/contents/List.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/hypark/project/cdp-admin/src/views/contents/List.vue","mtime":1581924483750},{"path":"/Users/hypark/project/cdp-admin/node_modules/css-loader/dist/cjs.js","mtime":1573115876168},{"path":"/Users/hypark/project/cdp-admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1573437292219},{"path":"/Users/hypark/project/cdp-admin/node_modules/postcss-loader/src/index.js","mtime":1573115876260},{"path":"/Users/hypark/project/cdp-admin/node_modules/vuetify-loader/lib/loader.js","mtime":1573794163850},{"path":"/Users/hypark/project/cdp-admin/node_modules/cache-loader/dist/cjs.js","mtime":1573115876135},{"path":"/Users/hypark/project/cdp-admin/node_modules/vue-loader/lib/index.js","mtime":1573437292219}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKI2NvbnRlbnRzTGlzdCAubGlzdFRpdGxlOmhvdmVyIHsKICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOwogICAgY3Vyc29yOiBwb2ludGVyOwp9Cg=="},{"version":3,"sources":["List.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkZA;AACA;AACA;AACA","file":"List.vue","sourceRoot":"src/views/contents","sourcesContent":["<template>\n  <v-container\n    id=\"contentsList\"\n    fluid\n    tag=\"section\">\n    <v-row\n            align=\"center\"\n            justify=\"center\">\n      <v-col cols=\"12\">\n        <base-material-card\n                color=\"green\">\n          <template v-slot:heading>\n            <h1 class=\"display-2 font-weight-regular\">\n              컨텐츠 리스트\n            </h1>\n          </template>\n          <v-card-text>\n            <v-row justify=\"space-between\" align=\"center\" class=\"ma-0\">\n              <div>\n                <v-btn\n                        :disabled=\"vModel.contentSelectedBtn[0]\"\n                        class=\"ma-1\"\n                        color=\"warning\"\n                        @click=\"contentExposure(true)\"\n                        small>\n                  ON\n                </v-btn>\n                <v-btn\n                        :disabled=\"vModel.contentSelectedBtn[1]\"\n                        class=\"ma-1\"\n                        color=\"warning\"\n                        @click=\"contentExposure(false)\"\n                        small >\n                  OFF\n                </v-btn>\n              </div>\n              <v-col cols=\"4\" class=\"pa-0\">\n                  <v-row>\n                  <v-col cols=\"3\">\n                      <v-select\n                              :items=\"config.selectOptions\"\n                              v-model=\"vModel.select\"\n                              label=\"노출\"\n                              color=\"secondary\"\n                              @change=\"submitKeyword\"/>\n                  </v-col>\n                  <v-col cols=\"6\" style=\"margin-top: 13px;\">\n                      <form @submit.prevent=\"submitKeyword\">\n                          <v-text-field\n                                  v-model=\"keyword\"\n                                  append-icon=\"mdi-magnify\"\n                                  class=\"ml-auto pt-0\"\n                                  label=\"Search\"\n                                  color=\"secondary\"\n                                  hide-details\n                                  single-line />\n                      </form>\n                  </v-col>\n                  <v-col cols=\"3\">\n                <v-select\n                        :items=\"config.perOptions\"\n                        v-model=\"vModel.per\"\n                        color=\"secondary\"\n                        @change=\"submitKeyword\"/>\n                  </v-col>\n                  </v-row>\n              </v-col>\n            </v-row>\n            <v-divider class=\"mt-3\" />\n            <template v-if=\"resultContents\">\n            <v-data-table\n                    v-model=\"contentSelectedData\"\n                    :headers=\"config.headers\"\n                    :items=\"resultContents.contents\"\n                    :items-per-page=\"Number(resultContents.meta.perPage)\"\n                    item-key=\"key\"\n                    no-data-text=\"컨텐츠가 없습니다.\"\n                    hide-default-footer\n                    show-select>\n              <template v-slot:item.title=\"{ item }\">\n                <p class=\"text-left ma-0 listTitle\"\n                   @click=\"tableRowClick(item)\">{{ ConvertHtml(item.title) }}</p>\n              </template>\n                <template v-slot:item.isOn=\"{ item }\">\n                    <template v-if=\"item.isOn\">ON</template>\n                    <template v-else>OFF</template>\n                </template>\n              <template v-slot:item.created=\"{ item }\">\n                {{ item.created.slice(0, 10) }}\n              </template>\n                <template v-slot:item.btn=\"{ item }\">\n                    <v-btn\n                            v-if=\"!item.published_at\"\n                            small\n                            color=\"warning\"\n                            @click=\"putPublish(item)\">\n                        송출하기\n                    </v-btn>\n                    <template v-else>\n                        송출 완료\n                    </template>\n                </template>\n            </v-data-table>\n            <v-pagination\n                    v-model=\"vModel.page\"\n                    :length=\"resultContents.meta.lastPage\"\n                    :total-visible=\"10\"\n                    @input=\"paginationClick\"\n                    circle\n                    class=\"justify-center mt-5\"\n                    next-icon=\"mdi-menu-right\"\n                    prev-icon=\"mdi-menu-left\"/>\n          </template>\n          </v-card-text>\n        </base-material-card>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n\n<script>\nimport { mapActions } from 'vuex'\n\nexport default {\n  created () {\n    this.reFresh()\n  },\n  data () {\n    return {\n      response: {\n        role: JSON.parse(localStorage.getItem('cdpUser')).role,\n        exposure: null,\n        publish: null,\n        list: null,\n      },\n      keyword: null,\n      contentSelectedData: [],\n      vModel: {\n        select: 'all',\n        per: 20,\n        page: 1,\n        orderby: 'created',\n        direction: 'desc',\n        where: null,\n        contentSelected: [],\n        contentSelectedIsOn: false,\n        contentSelectedBtn: [ true, true ]\n      },\n      config: {\n        selectOptions: [\n          { value: 'all', text: '전체' },\n          { value: 'on', text: 'ON' },\n          { value: 'off', text: 'OFF' }\n        ],\n        perOptions: [20, 50, 100, 200],\n        headers: [\n          { text: '상태', value: 'isOn', align: 'center' },\n          { text: '종류', value: 'type', align: 'center' },\n          { text: '카테고리', value: 'category', align: 'center' },\n          { text: '제목', value: 'title', align: 'center' },\n          { text: 'CP명', value: 'partner.name', align: 'center' },\n          { text: '등록일', value: 'created', align: 'center' },\n          { text: '신고건수', value: 'assucationCount', align: 'center' },\n          { text: '송출', value: 'btn', align: 'center' },\n        ]\n      }\n    }\n  },\n  methods: {\n    ...mapActions(['xhttp']),\n    snack (type, val) {\n      this.vModel.errorMessage = val\n      this.vModel.snackbarType = type\n      this.vModel.snackbar = true\n    },\n    reFresh () {\n      let send = {\n        page: 1,\n        per: 20,\n        on: 'all'\n      }\n      if (this.$route.query.page) {\n        send.page = this.$route.query.page\n        this.vModel.page = Number(this.$route.query.page)\n      }\n      if (this.$route.query.per) {\n        send.per = this.$route.query.per\n        this.vModel.per = Number(this.$route.query.per)\n      }\n      if (this.$route.query.on) {\n        send.on = this.$route.query.on\n        this.vModel.select = this.$route.query.on\n      }\n      if (this.$route.query.keyword) {\n        send.keyword = this.$route.query.keyword\n        this.keyword = this.$route.query.keyword\n      }\n      this.$router.replace({ name: 'contentsList', query: send })\n      this.contentsList()\n    },\n    ConvertHtml (str) {\n      str = str.replace(/&amp;/g, '&')\n      str = str.replace(/&lt;/g, '<')\n      str = str.replace(/&gt;/g, '>')\n      str = str.replace(/&quot;/g, '\"')\n      str = str.replace(/&#039;/g, \"'\")\n      str = str.replace(/&#39;/g, \"'\")\n      return str\n    },\n    tableRowClick (val) {\n      this.$router.push({ name: 'contentsView', params: { contents_id: val.key } })\n    },\n    paginationClick (page) {\n      this.contentSelectedData = []\n      this.vModel.page = page\n      let send = {\n        page: page,\n        per: this.vModel.per,\n        on: this.vModel.select\n      }\n      if (this.$route.query.keyword) {\n        send.keyword = this.$route.query.keyword\n      }\n      this.$router.replace({ name: 'contentsList', query: send })\n      this.contentsList()\n    },\n    submitKeyword () {\n      let send = {\n        page: 1,\n        per: this.vModel.per,\n        on: this.vModel.select\n      }\n      if (this.keyword) {\n        send.keyword = this.keyword\n      }\n      this.$router.push({ name: 'contentsList', query: send })\n      this.vModel.page = 1\n      this.contentsList()\n    },\n    numReplace (val) {\n      let num = val + ''\n      const result = num.replace(/\\D/g, '').replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n\n      return result\n    },\n    contentExposure (val) {\n      let text\n      if (val) {\n        // on\n        text = '게재'\n      } else {\n        // off\n        text = '차단'\n      }\n      if (confirm('컨텐츠를 ' + text + ' 하시겠습니까?')) {\n        let data = this.contentSelectedData.map(function ($value) {\n          return $value.key\n        })\n        for (let idx in data) {\n          this.exposure(data[idx], idx)\n        }\n      }\n    },\n    putPublish (val) {\n      this.xhttp({\n        url: '/contents/' + val.key + '/publish',\n        method: 'put',\n        data: null\n      }).then((response) => {\n        if (response.status === 200) {\n          this.response.publish = response.data.data\n          this.reFresh()\n        }\n      }).catch((error) => {\n        if (error.message === 'Request failed with status code 401') {\n          this.$router.push({ 'name': 'UserLogin' })\n        } else {\n          this.snack('warning', '관리자에게 문의 바랍니다.')\n        }\n      })\n    },\n    contentSelectedFn (val) {\n      if (val.length === 1 && !this.vModel.contentSelectedIsOn) {\n        // 하나만\n        if (val[0].isOn) {\n          // 첫번째 클릭한게 on\n          this.vModel.contentSelectedBtn = [true, false]\n        } else {\n          // 첫번째 클릭한게 off\n          this.vModel.contentSelectedBtn = [false, true]\n        }\n        this.vModel.contentSelectedIsOn = true\n      } if (val.length === 0) {\n        this.vModel.contentSelectedBtn = [true, true]\n        this.vModel.contentSelectedIsOn = false\n      } else if (val.length > 1) {\n        // 첫번째 클릭한 값\n        let bool = this.vModel.contentSelectedBtn[0]\n        if (bool) {\n          // 첫번째 클릭한 값 on\n          let a = val[val.length - 1].isOn\n          if (!a) {\n            this.contentSelectedData = val.filter(function ($value) {\n              return $value.isOn === true\n            })\n          }\n        } else {\n          // 첫번째 클릭한 값 off\n          let a = val[val.length - 1].isOn\n          if (a) {\n            this.contentSelectedData = val.filter(function ($value) {\n              return $value.isOn === false\n            })\n          }\n        }\n      }\n    },\n    exposure (id, idx) {\n      this.xhttp({\n        url: '/contents/' + id + '/exposure',\n        method: 'put',\n        data: null\n      }).then((response) => {\n        if (response.status === 200) {\n          this.response.exposure = response.data.data\n          let num = this.contentSelectedData[idx].num\n          this.response.list.contents[num].isOn = this.response.exposure.contents.isOn\n          if (this.contentSelectedData.length - 1 === num) {\n            this.contentSelectedData = []\n            this.response.list = null\n            this.contentsList()\n          }\n        }\n      }).catch((error) => {\n        if (error.message === 'Request failed with status code 401') {\n          this.$router.push({ 'name': 'UserLogin' })\n        } else {\n          this.snack('warning', '관리자에게 문의 바랍니다.')\n        }\n      })\n    },\n    collectionsBtn () {\n      this.$router.push({ name: 'feedCollections' })\n    },\n    contentsList () {\n      this.response.list = null\n      let send = {\n        per: this.$route.query.per,\n        page: this.$route.query.page,\n        orderby: this.vModel.orderby,\n        direction: this.vModel.direction,\n        on: this.$route.query.on\n      }\n      if (this.$route.query.keyword) {\n        send.keyword = this.$route.query.keyword\n        send.where = 'title'\n      }\n      this.xhttp({\n        url: '/contents',\n        method: 'get',\n        params: send\n      }).then((response) => {\n        if (response.status === 200) {\n          this.response.list = response.data.data\n          for (let i = 0; i < this.response.list.contents.length; i++) {\n            this.response.list.contents[i].num = i\n          }\n        }\n      }).catch((error) => {\n        if (error.message === 'Request failed with status code 401') {\n          this.$router.push({ 'name': 'UserLogin' })\n        } else {\n          this.snack('warning', '관리자에게 문의 바랍니다.')\n        }\n      })\n    }\n  },\n  computed: {\n    resultContents () {\n      if (this.response.list) {\n        return this.response.list\n      } else {\n        return false\n      }\n    }\n  },\n  watch: {\n    keyword: function (val) {\n      if (val === '') {\n        this.submitKeyword()\n      }\n    },\n    contentSelectedData: function (val) {\n      if (val) {\n        this.contentSelectedFn(val)\n      }\n    }\n  }\n}\n</script>\n\n<style>\n    #contentsList .listTitle:hover {\n        text-decoration: underline;\n        cursor: pointer;\n    }\n</style>\n"]}]}