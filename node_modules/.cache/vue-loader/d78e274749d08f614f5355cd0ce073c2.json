{"remainingRequest":"/Users/hypark/project/cdp-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hypark/project/cdp-admin/src/views/feed/Adin.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/hypark/project/cdp-admin/src/views/feed/Adin.vue","mtime":1580691291944},{"path":"/Users/hypark/project/cdp-admin/node_modules/css-loader/dist/cjs.js","mtime":1573115876168},{"path":"/Users/hypark/project/cdp-admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1573437292219},{"path":"/Users/hypark/project/cdp-admin/node_modules/postcss-loader/src/index.js","mtime":1573115876260},{"path":"/Users/hypark/project/cdp-admin/node_modules/vuetify-loader/lib/loader.js","mtime":1573794163850},{"path":"/Users/hypark/project/cdp-admin/node_modules/cache-loader/dist/cjs.js","mtime":1573115876135},{"path":"/Users/hypark/project/cdp-admin/node_modules/vue-loader/lib/index.js","mtime":1573437292219}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKI291dEFkcyAuZmxpcC1saXN0LW1vdmUgewogIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjVzOwp9CiNvdXRBZHMgLm5vLW1vdmUgewogIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwczsKfQojb3V0QWRzIC5naG9zdCB7CiAgb3BhY2l0eTogMC41OwogIGJhY2tncm91bmQ6ICNjOGViZmI7Cn0K"},{"version":3,"sources":["Adin.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Adin.vue","sourceRoot":"src/views/feed","sourcesContent":["<template>\n  <v-container\n          id=\"adIn\"\n          fluid\n          tag=\"section\">\n    <v-row\n            align=\"center\"\n            justify=\"center\">\n      <v-col cols=\"12\">\n        <base-material-card\n                color=\"green\">\n          <template v-slot:heading>\n            <h1 class=\"display-2 font-weight-regular\">\n              컨텐츠 내부 광고\n            </h1>\n          </template>\n          <v-card-text>\n            <v-row justify=\"space-between\" align=\"center\">\n              <v-col cols=\"2\">\n                <v-select\n                        :items=\"config.mediaOptions\"\n                        v-model=\"vModel.media\"\n                        label=\"매체를 선택해주세요.\"\n                        color=\"secondary\"\n                        @change=\"mediaChange()\" />\n              </v-col>\n              <v-btn :disabled=\"!vModel.media\"\n                     color=\"warning\"\n                     @click=\"adsCreate\">\n                등록\n              </v-btn>\n            </v-row>\n            <v-row justify=\"space-between\">\n              <template v-if=\"resultList\">\n                <template v-if=\"resultList.length > 0\">\n                  <v-col cols=\"6\">\n                    <draggable\n                            class=\"list-group pl-0\"\n                            tag=\"ul\"\n                            v-model=\"response.list.data\"\n                            v-bind=\"config.dragOptions\"\n                            @start=\"drag = true\"\n                            @end=\"drag = false\">\n                      <transition-group type=\"transition\">\n                        <li class=\"list-group-item mb-2 pa-3\"\n                            style=\"list-style: none;background:#fff;border:1px solid #ddd;border-radius: 5px;cursor: move;\"\n                            v-for=\"(item) in response.list.data\"\n                            :key=\"item.key\"\n                            @click=\"listClick(item.key)\">\n                          {{item.title}}\n                          <v-icon style=\"cursor:pointer;position:relative;z-index:5;\" @click=\"listClose(item.key)\">mdi-close-circle</v-icon>\n                          <v-icon style=\"float:right;cursor:pointer;\">mdi-chevron-right</v-icon>\n                        </li>\n                      </transition-group>\n                    </draggable>\n                    <div class=\"text-center mt-5\">\n                      <v-btn color=\"warning\"\n                             @click=\"listEdit\">\n                        순서 저장\n                      </v-btn>\n                    </div>\n                  </v-col>\n                  <v-col cols=\"6\">\n                    <v-form\n                            v-model=\"vModel.valid\"\n                            ref=\"form\">\n                      <v-text-field\n                              label=\"제목\"\n                              type=\"text\"\n                              color=\"secondary\"\n                              v-model=\"vModel.title\"\n                              :rules=\"config.titleRules\"\n                              required />\n                      <v-textarea\n                              label=\"코드\"\n                              color=\"secondary\"\n                              auto-grow\n                              rows=\"1\"\n                              row-height=\"5\"\n                              no-resize\n                              v-model=\"vModel.code\"\n                              :rules=\"config.codeRules\"\n                              required />\n                    </v-form>\n                    <div class=\"text-center\" v-if=\"resultList\">\n                      <v-btn :disabled=\"!vModel.valid\"\n                             color=\"warning\"\n                             v-if=\"resultList.length > 0\"\n                             @click=\"adsEdit()\">\n                        수정\n                      </v-btn>\n                      <v-btn :disabled=\"!vModel.valid\"\n                             color=\"warning\"\n                             v-if=\"resultList.length === 0\"\n                             @click=\"adsCreate()\">\n                        등록\n                      </v-btn>\n                    </div>\n                  </v-col>\n                </template>\n                <v-col v-else>\n                  <p>리스트가 없습니다.</p>\n                </v-col>\n              </template>\n            </v-row>\n          </v-card-text>\n        </base-material-card>\n      </v-col>\n    </v-row>\n    <base-material-snackbar\n            v-model=\"vModel.snackbar\"\n            :type=\"vModel.snackbarType\"\n            v-bind=\"{\n        'top': true,\n        'right': true\n      }\">\n      <span style=\"display:block;width:300px;margin:0;\">{{vModel.errorMessage}}</span>\n    </base-material-snackbar>\n  </v-container>\n</template>\n\n<script>\nimport { mapActions } from 'vuex'\nimport draggable from 'vuedraggable'\n\nexport default {\n  components: {\n    draggable,\n  },\n  created () {\n    this.mediaList()\n    this.adsList()\n  },\n  data () {\n    return {\n      response: {\n        media: null,\n        create: null,\n        edit: null,\n        listEdit: null,\n        listDelete: null,\n        list: [],\n      },\n      vModel: {\n        snackbar: false,\n        snackbarType: 'warning',\n        errorMessage: null,\n        listOpen: null,\n        valid: true,\n        title: '',\n        code: '',\n      },\n      config: {\n        dragOptions: {\n          animation: 200,\n          group: 'description',\n          disabled: false,\n          ghostClass: 'ghost'\n        },\n        mediaOptions: [],\n        titleRules: [ v => !!v || '제목을 입력하세요.' ],\n        codeRules: [ v => !!v || '코드를 입력하세요.' ],\n      }\n    }\n  },\n  methods: {\n    ...mapActions(['xhttp']),\n    snack (type, val) {\n      this.vModel.errorMessage = val\n      this.vModel.snackbarType = type\n      this.vModel.snackbar = true\n    },\n    listClick (val) {\n      let list = this.response.list.data.filter(function ($value) {\n        return $value.key === val\n      })\n      this.vModel.listOpen = val\n      this.vModel.title = list[0].title\n      this.vModel.code = list[0].code\n    },\n    listClose (val) {\n      if (this.response.list.data.length > 1) {\n        let list = this.response.list.data.filter(function ($value) {\n          return $value.key !== val\n        })\n        this.response.list.data = list\n      }\n      this.xhttp({\n        url: '/' + this.vModel.media + '/inside/' + val,\n        method: 'delete',\n        data: null\n      }).then((response) => {\n        if (response.status === 200) {\n          this.response.listDelete = response.data.data\n          this.adsList()\n        }\n      }).catch((error) => {\n        if (error.message === 'Request failed with status code 401') {\n          this.$router.push({ 'name': 'UserLogin' })\n        } else {\n          this.snack('warning', '관리자에게 문의 바랍니다.')\n        }\n      })\n    },\n    listEdit () {\n      let data = this.response.list.data\n      let key = data.map(function ($value) {\n        return { key: $value.key }\n      })\n      let send = {\n        inside: key\n      }\n      this.xhttp({\n        url: '/' + this.vModel.media + '/inside-rank',\n        method: 'put',\n        data: send\n      }).then((response) => {\n        if (response.status === 200) {\n          this.response.listEdit = response.data.data\n          this.snack('success', '순서 수정 완료되었습니다.')\n        }\n      }).catch((error) => {\n        if (error.message === 'Request failed with status code 401') {\n          this.$router.push({ 'name': 'UserLogin' })\n        } else {\n          this.snack('warning', '관리자에게 문의 바랍니다.')\n        }\n      })\n    },\n    adsEdit () {\n      if (this.$refs.form.validate()) {\n        if (confirm('수정 하시겠습니까?')) {\n          let send = {\n            title: this.vModel.title,\n            code: this.vModel.code\n          }\n          this.xhttp({\n            url: '/' + this.vModel.media + '/inside/' + this.vModel.listOpen,\n            method: 'put',\n            data: send\n          }).then((response) => {\n            if (response.status === 200) {\n              this.response.listEdit = response.data.data\n              this.snack('success', '수정 완료되었습니다.')\n              this.adsList()\n            }\n          }).catch((error) => {\n            if (error.message === 'Request failed with status code 401') {\n              this.$router.push({ 'name': 'UserLogin' })\n            } else {\n              this.snack('warning', '관리자에게 문의 바랍니다.')\n            }\n          })\n        }\n      }\n    },\n    adsCreate () {\n      this.$router.push({ 'name': 'feedAdinRegister', params: { media_id: this.vModel.media } })\n    },\n    mediaChange () {\n      this.vModel.title = ''\n      this.vModel.code = ''\n      this.response.list = null\n      if (this.vModel.media) {\n        this.$router.push({ 'name': 'feedAdin', query: { media: this.vModel.media } })\n        this.adsList()\n      }\n    },\n    mediaList () {\n      let send = {\n        orderby: 'created',\n        direction: 'desc'\n      }\n      this.xhttp({\n        url: '/media',\n        method: 'get',\n        params: send\n      }).then((response) => {\n        if (response.status === 200) {\n          this.response.media = response.data.data.media\n          this.config.mediaOptions = this.response.media.map(function ($value) {\n            return { value: $value.key, text: $value.name }\n          })\n          this.config.mediaOptions.unshift({ value: '', text: '매체 선택' })\n        }\n      }).catch((error) => {\n        if (error.message === 'Request failed with status code 401') {\n          this.$router.push({ 'name': 'UserLogin' })\n        } else {\n          this.snack('warning', '관리자에게 문의 바랍니다.')\n        }\n      })\n    },\n    adsList () {\n      if (this.$route.query.media) {\n        this.vModel.media = this.$route.query.media\n        this.xhttp({\n          url: '/' + this.vModel.media + '/inside',\n          method: 'get',\n          params: null\n        }).then((response) => {\n          if (response.status === 200) {\n            this.response.list = response.data.data\n          }\n        }).catch((error) => {\n          if (error.message === 'Request failed with status code 401') {\n            this.$router.push({ 'name': 'UserLogin' })\n          } else {\n            this.snack('warning', '관리자에게 문의 바랍니다.')\n          }\n        })\n      }\n    },\n  },\n  computed: {\n    resultList () {\n      if (this.response.list) {\n        return this.response.list.data\n      } else {\n        return false\n      }\n    },\n  },\n}\n</script>\n\n<style>\n  #outAds .flip-list-move {\n    transition: transform 0.5s;\n  }\n  #outAds .no-move {\n    transition: transform 0s;\n  }\n  #outAds .ghost {\n    opacity: 0.5;\n    background: #c8ebfb;\n  }\n</style>\n"]}]}